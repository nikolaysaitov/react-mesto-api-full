{"ast":null,"code":"const token = localStorage.getItem('jwt');\n\nclass Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this._headers = headers;\n    this._baseUrl = baseUrl; // тело конструктора\n  }\n\n  _getResponseData(res) {\n    if (!res.ok) {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n\n    return res.json();\n  }\n\n  getProfile(token) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(this._getResponseData);\n  }\n\n  getInitialCards(token) {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(this._getResponseData);\n  }\n\n  editProfile(name, about) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name,\n        about\n      })\n    }).then(this._getResponseData);\n  }\n\n  addCard(name, link, token) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: \"POST\",\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name,\n        link\n      })\n    }).then(this._getResponseData);\n  }\n\n  deleteCard(id, token) {\n    return fetch(`${this._baseUrl}/cards/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(this._getResponseData);\n  }\n\n  deleteLike(id, token) {\n    return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n      method: \"DELETE\",\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(this._getResponseData);\n  }\n\n  addLike(id, token) {\n    return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n      method: \"PUT\",\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(this._getResponseData);\n  }\n\n  updateAvatar(avatar, token) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        avatar\n      })\n    }).then(this._getResponseData);\n  } // другие методы работы с API\n\n\n} // // export const api = new Api({\n// //   baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-39\",\n// //   headers: {\n// //     authorization: \"083f1856-1d24-41b5-bab8-7705d2d18558\",\n// //     \"Content-Type\": \"application/json\",\n// //   },\n// // });\n\n\nexport const api = new Api({\n  baseUrl: \"http://localhost:3000/\",\n  headers: {\n    'Authorization': `Bearer ${token}`,\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n}); // let baseUrl = '';\n// const { NODE_ENV } = process.env;\n// console.log(NODE_ENV)\n// if (NODE_ENV === 'production') {\n//   baseUrl = 'https://saitovkmsapi.nomoredomains.xyz/';\n// } else {\n//   baseUrl = 'http://localhost:3000'\n// }","map":{"version":3,"sources":["/Users/nikolay/Desktop/react-mesto-api-full/frontend/src/utils/Api.js"],"names":["token","localStorage","getItem","Api","constructor","baseUrl","headers","_headers","_baseUrl","_getResponseData","res","ok","Promise","reject","status","json","getProfile","fetch","then","getInitialCards","editProfile","name","about","method","body","JSON","stringify","addCard","link","deleteCard","id","deleteLike","addLike","updateAvatar","avatar","api"],"mappings":"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","sourcesContent":["const token = localStorage.getItem('jwt');\nclass Api {\n  constructor({ baseUrl, headers }) {\n    this._headers = headers;\n    this._baseUrl = baseUrl; // тело конструктора\n  }\n\n  _getResponseData(res) {\n    if (!res.ok) {\n        return Promise.reject(`Ошибка: ${res.status}`);\n    }\n    return res.json();\n}\n\n  getProfile(token) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: { \n        'Authorization': `Bearer ${token}`,\n        \"Content-Type\": \"application/json\", \n      }\n    })\n      .then(this._getResponseData)\n      \n  }\n\n  getInitialCards(token) {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: { \n        'Authorization': `Bearer ${token}`,\n        \"Content-Type\": \"application/json\", \n      }\n    })\n    .then(this._getResponseData)\n      \n  }\n\n  editProfile(name, about) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: { \n      \n        \"Content-Type\": \"application/json\", \n      },\n      body: JSON.stringify({\n        name,\n        about,\n      }),\n    })\n    .then(this._getResponseData)\n    \n  }\n  addCard(name, link, token) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: \"POST\",\n      headers: { \n        'Authorization': `Bearer ${token}`,\n        \"Content-Type\": \"application/json\", \n      },\n      body: JSON.stringify({\n        name,\n        link,\n      }),\n    })\n    .then(this._getResponseData)\n    \n  }\n  deleteCard(id, token) {\n    return fetch(`${this._baseUrl}/cards/${id}`, {\n      method: \"DELETE\",\n      headers: { \n        'Authorization': `Bearer ${token}`,\n        \"Content-Type\": \"application/json\", \n      }\n    })\n    .then(this._getResponseData)\n      \n  }\n\n  deleteLike(id, token) {\n    return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n      method: \"DELETE\",\n      headers: { \n        'Authorization': `Bearer ${token}`,\n        \"Content-Type\": \"application/json\", \n      }\n    })\n    .then(this._getResponseData)\n      \n  }\n\n  addLike(id, token) {\n    return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n      method: \"PUT\",\n      headers: { \n        'Authorization': `Bearer ${token}`,\n        \"Content-Type\": \"application/json\", \n      }\n    })\n    .then(this._getResponseData)\n    \n  }\n\n  \n  updateAvatar(avatar, token) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: { \n        'Authorization': `Bearer ${token}`,\n        \"Content-Type\": \"application/json\", \n      },\n      body: JSON.stringify({\n        avatar\n      })\n    })\n    .then(this._getResponseData)\n    \n  }\n  \n\n  // другие методы работы с API\n}\n\n// // export const api = new Api({\n// //   baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-39\",\n// //   headers: {\n// //     authorization: \"083f1856-1d24-41b5-bab8-7705d2d18558\",\n// //     \"Content-Type\": \"application/json\",\n// //   },\n// // });\n\n\nexport const api = new Api({\n  baseUrl: \"http://localhost:3000/\",\n  headers: {\n    'Authorization': `Bearer ${token}`,\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n  }\n});\n// let baseUrl = '';\n// const { NODE_ENV } = process.env;\n// console.log(NODE_ENV)\n// if (NODE_ENV === 'production') {\n//   baseUrl = 'https://saitovkmsapi.nomoredomains.xyz/';\n// } else {\n//   baseUrl = 'http://localhost:3000'\n// }\n\n\n"]},"metadata":{},"sourceType":"module"}